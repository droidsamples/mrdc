
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.hardware.camera2.CameraCharacteristics
import android.hardware.camera2.CameraManager
import android.hardware.camera2.CameraMetadata
import android.os.Bundle
import android.widget.Toast
import com.google.gson.JsonObject
import com.miteksystems.misnap.misnapworkflow_UX2.MiSnapWorkflowActivity_UX2
import com.miteksystems.misnap.misnapworkflow_UX2.params.WorkflowApi
import com.miteksystems.misnap.params.CameraApi
import com.miteksystems.misnap.params.MiSnapApi
import com.miteksystems.misnap.params.ScienceApi
import org.json.JSONException

class MRDCTransparentActivity : Activity() {

    var requestedPhotoType = AUTO_CAPTURE_CHECKS
    var resultIntent: Intent? = null
    val REQUEST_CAPTURE_CHECK = 1981
    val REQUEST_BACK_CHECK_INFO = REQUEST_CAPTURE_CHECK + 1

    var isFrontCheckCaptured = false

    companion object {
        const val AUTO_CAPTURE_CHECKS = 1
        const val CAPTURE_FRONT_CHECK = AUTO_CAPTURE_CHECKS + 1
        const val CAPTURE_BACK_CHECK = CAPTURE_FRONT_CHECK + 1

        const val REQUEST_CHECK_TYPE = 1422
        const val REQUEST_PHOTO_TYPE = "PhotoType"

        const val EXTRA_FRONT_CHECK_FILE_NAME = "FrontCheckFileName"
        const val EXTRA_BACK_CHECK_FILE_NAME = "BackCheckFileName"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        resultIntent = Intent()
        requestedPhotoType = intent.getIntExtra(REQUEST_PHOTO_TYPE, AUTO_CAPTURE_CHECKS)
        if (requestedPhotoType == CAPTURE_BACK_CHECK) {
            navigateToBackCheckInfo()
        } else {
            takePhoto(requestedPhotoType)
        }
    }

    private fun takePhoto(photoType: Int) {

        if (hasBackCamera()) {
            val misnapParams = JsonObject()
            try {
                if (photoType == AUTO_CAPTURE_CHECKS || photoType == CAPTURE_FRONT_CHECK) {
                    misnapParams.addProperty(
                        MiSnapApi.MiSnapDocumentType, MiSnapApi.PARAMETER_DOCTYPE_CHECK_FRONT
                    )
                    misnapParams.addProperty(ScienceApi.MiSnapGeoRegion, 1)
                } else {
                    misnapParams.addProperty(
                        MiSnapApi.MiSnapDocumentType, MiSnapApi.PARAMETER_DOCTYPE_CHECK_BACK
                    )
                }
                misnapParams.addProperty(CameraApi.MiSnapAllowScreenshots, 1)
                misnapParams.addProperty(CameraApi.MiSnapTorchMode, 2)
                misnapParams.addProperty(WorkflowApi.MiSnapTrackGlare, "1")
                misnapParams.addProperty(
                    CameraApi.MiSnapFocusMode, CameraApi.PARAMETER_FOCUS_MODE_HYBRID
                )
            } catch (e: JSONException) {
                e.printStackTrace()
            }
            startActivityForResult(
                Intent(this, MiSnapWorkflowActivity_UX2::class.java).putExtra(
                    MiSnapApi.JOB_SETTINGS, misnapParams.toString()
                ), REQUEST_CAPTURE_CHECK
            )
        } else {
            Toast.makeText(
                this, "Camera not available", Toast.LENGTH_LONG
            )
                .show()
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        when (resultCode) {
            RESULT_OK ->
                when (requestCode) {
                    REQUEST_CAPTURE_CHECK ->
                        when (isFrontCheckCaptured) {
                            false -> navigateToBackCheckInfo(data)
                            true -> handleBackCheckCaptured(data)
                        }
                    CAPTURE_BACK_CHECK -> handleBackCheckCaptured(data)
                    REQUEST_BACK_CHECK_INFO -> takePhoto(CAPTURE_BACK_CHECK)
                }
            RESULT_CANCELED ->
                when (requestCode) {
                    REQUEST_BACK_CHECK_INFO, REQUEST_CAPTURE_CHECK -> {
                        setResult(RESULT_OK, resultIntent)
                        finish()
                    }
                }
        }
    }

    private fun navigateToBackCheckInfo(data: Intent? = null) {
        isFrontCheckCaptured = true
        data?.let {
            resultIntent?.putExtra(
                EXTRA_FRONT_CHECK_FILE_NAME,
                it.getStringExtra(MiSnapWorkflowActivity_UX2.CHECK_FILE_NAME))
        }

        startActivityForResult(
            Intent(
                this, MobileDepositBackCheckInfoActivity::class.java
            ), REQUEST_BACK_CHECK_INFO
        )
    }

    private fun handleBackCheckCaptured(data: Intent?) {
        data?.let {
            resultIntent?.putExtra(
                EXTRA_BACK_CHECK_FILE_NAME,
                it.getStringExtra(MiSnapWorkflowActivity_UX2.CHECK_FILE_NAME))
        }
        setResult(RESULT_OK, resultIntent)
        finish()
    }

    private fun hasBackCamera(): Boolean {
        val manager = getSystemService(Context.CAMERA_SERVICE) as CameraManager
        for (cameraId in manager.cameraIdList) {
            val cameraCharacteristics = manager.getCameraCharacteristics(cameraId)
            if (cameraCharacteristics.get(
                    CameraCharacteristics.LENS_FACING
                ) == CameraMetadata.LENS_FACING_BACK
            ) return true
        }
        return false
    }
}
